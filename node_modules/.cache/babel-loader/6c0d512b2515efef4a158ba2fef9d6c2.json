{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\A\\\\reactTesting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\A\\\\reactTesting\\\\src\\\\components\\\\Quiz.js\";\nimport React, { Component, useState, useLayoutEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction Quiz({\n  numRows,\n  rowHeight\n}) {\n  const totalHeight = rowHeight * numRows;\n  const scrollAreaRef = useRef();\n\n  const _useState = useState(document.documentElement.scrollHeight),\n        _useState2 = _slicedToArray(_useState, 2),\n        availableHeight = _useState2[0],\n        setAvailableHeight = _useState2[1];\n\n  const _useState3 = useState(window.scrollY),\n        _useState4 = _slicedToArray(_useState3, 2),\n        scrollTop = _useState4[0],\n        setScrollTop = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        startIndex = _useState6[0],\n        setStartIndex = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        endIndex = _useState8[0],\n        setEndIndex = _useState8[1];\n\n  const _useState9 = useState(endIndex - startIndex),\n        _useState10 = _slicedToArray(_useState9, 2),\n        rendered = _useState10[0],\n        setRendered = _useState10[1];\n\n  const items = [];\n  var index = startIndex;\n\n  function renderRowAtIndex(index) {\n    return React.createElement(\"div\", {\n      style: {\n        height: rowHeight,\n        padding: \"5px 10px\",\n        fontSize: 24\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"This is #\", index + 1, \".\");\n  }\n\n  useLayoutEffect(() => {\n    const onScrollHandle = () => {\n      setScrollTop(window.scrollY);\n      setRendered(endIndex - startIndex);\n    };\n\n    setStartIndex(Math.floor(Math.max(scrollTop - rowHeight * 12, 0) / rowHeight));\n    setEndIndex(Math.min(Math.min(startIndex + Math.ceil(availableHeight / rowHeight) + 12, numRows), numRows));\n    window.addEventListener('scroll', onScrollHandle);\n    return () => window.removeEventListener('scroll', onScrollHandle);\n  }, [scrollTop]); //Can add conditional to stop rendering if over certain threshold \n  //for instance while using scrollbar on the side\n  //to prevent overrendering and performance issues due to rapid scrolling\n\n  while (index < endIndex) {\n    items.push(React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, renderRowAtIndex(index), React.createElement(\"img\", {\n      src: \"i.imgur.com/qcziNzyl.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n    index++;\n  } //Better solution for height: totalHeight, scrollbar on load better than \n  //scrollbar max height upfront\n\n\n  return React.createElement(\"div\", {\n    className: \"col-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Smart Rendering\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"This containers purpose is to smartly render only the items visible plus a few outside the viewport.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"There are currently \", numRows, \" renderable elements and \", rendered, \" rendered elements.\"), React.createElement(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      height: rowHeight * rendered,\n      paddingTop: startIndex * rowHeight\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, items)));\n}\n\nexport default Quiz;","map":{"version":3,"sources":["C:\\Users\\A\\reactTesting\\src\\components\\Quiz.js"],"names":["React","Component","useState","useLayoutEffect","useRef","ReactDOM","Quiz","numRows","rowHeight","totalHeight","scrollAreaRef","document","documentElement","scrollHeight","availableHeight","setAvailableHeight","window","scrollY","scrollTop","setScrollTop","startIndex","setStartIndex","endIndex","setEndIndex","rendered","setRendered","items","index","renderRowAtIndex","height","padding","fontSize","onScrollHandle","Math","floor","max","min","ceil","addEventListener","removeEventListener","push","width","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component, useState, useLayoutEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n\r\nfunction Quiz({ numRows, rowHeight }) {\r\n\r\n\r\n    const totalHeight = rowHeight * numRows;\r\n    const scrollAreaRef = useRef();\r\n    const [availableHeight, setAvailableHeight] = useState(document.documentElement.scrollHeight);\r\n    const [scrollTop, setScrollTop] = useState(window.scrollY);\r\n    const [startIndex, setStartIndex] = useState(0);\r\n    const [endIndex, setEndIndex] = useState(0);\r\n    const [rendered, setRendered] = useState(endIndex - startIndex)\r\n    const items = [];\r\n    var index = startIndex;\r\n        \r\n    \r\n    function renderRowAtIndex(index) {\r\n        return (\r\n          <div style={{height: rowHeight, padding: \"5px 10px\", fontSize: 24}}>\r\n            This is #{(index + 1)}.\r\n          </div>\r\n        );\r\n      }\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        const onScrollHandle = () => {\r\n            setScrollTop(window.scrollY);\r\n            setRendered(endIndex - startIndex);\r\n          };\r\n        setStartIndex(Math.floor(Math.max(scrollTop-(rowHeight*12), 0) / rowHeight));\r\n        setEndIndex(Math.min(Math.min(\r\n            startIndex + Math.ceil(availableHeight/rowHeight) + 12 ,\r\n            numRows\r\n        ), numRows));\r\n        \r\n        window.addEventListener('scroll', onScrollHandle)\r\n\r\n        return () => window.removeEventListener('scroll', onScrollHandle)\r\n    \r\n    }, [scrollTop] );\r\n\r\n    //Can add conditional to stop rendering if over certain threshold \r\n    //for instance while using scrollbar on the side\r\n    //to prevent overrendering and performance issues due to rapid scrolling\r\n\r\n\r\n\r\n    while (index < endIndex) {\r\n        items.push(<li key={index}>{renderRowAtIndex(index)}<img src=\"i.imgur.com/qcziNzyl.jpg\"></img></li>);\r\n        index++;  \r\n    }\r\n    \r\n    \r\n    \r\n\r\n    //Better solution for height: totalHeight, scrollbar on load better than \r\n    //scrollbar max height upfront\r\n    \r\n    return (\r\n\r\n        <div className=\"col-12\">\r\n        <h1>Smart Rendering</h1>\r\n        <p>This containers purpose is to smartly render only the items visible plus a few outside the viewport.</p>\r\n        <p>There are currently {numRows} renderable elements and {rendered} rendered elements.</p>\r\n        <div\r\n        style={{ height: \"100vh\", width: \"100vw\"}}\r\n        >\r\n        <div style={{height: (rowHeight * rendered), paddingTop: startIndex * rowHeight}}>\r\n            {items}\r\n        </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}